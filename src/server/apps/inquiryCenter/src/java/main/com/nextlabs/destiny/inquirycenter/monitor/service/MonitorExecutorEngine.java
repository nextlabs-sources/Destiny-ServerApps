/**
 * 
 */
package com.nextlabs.destiny.inquirycenter.monitor.service;

import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import javax.mail.internet.AddressException;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.bluejungle.destiny.container.shared.inquirymgr.hibernateimpl.AlertDO;
import com.bluejungle.destiny.container.shared.inquirymgr.hibernateimpl.MonitorDO;
import com.bluejungle.framework.comp.ComponentManagerFactory;
import com.bluejungle.framework.comp.IComponentManager;
import com.bluejungle.framework.utils.IMailHelper;
import com.nextlabs.framework.messaging.MessagingException;

/**
 * @author nnallagatla
 *
 */
public class MonitorExecutorEngine implements IMonitorExecutor {

	private static final Log LOG = LogFactory.getLog(MonitorExecutorEngine.class); 
	
	private static final int NUMBER_OF_THREADS = 5;
	
	private static MonitoringService mService;
	
	private static ExecutorService executor = Executors.newFixedThreadPool(NUMBER_OF_THREADS);
	
	/* (non-Javadoc)
	 * @see com.nextlabs.destiny.inquirycenter.monitor.service.IMonitorExecutor#runMonitors()
	 */
	@Override
	public void runMonitors() {
		if (LOG.isDebugEnabled()){
			LOG.debug("entering runMonitors");
		}
		long start = System.currentTimeMillis();
		List<MonitorDO> monitors = getMonitoringService().getRunnableMonitors();		
		for (MonitorDO monitor : monitors)
		{
			executor.submit(new MonitorTask(monitor));
		}
		if (LOG.isDebugEnabled()){
			LOG.debug("exiting runMonitors. Time taken (ms): " + (System.currentTimeMillis() - start));
		}
	}
	
	/**
	 * 
	 * @author nnallagatla
	 *
	 */
	class MonitorTask implements Runnable
	{
		private MonitorDO monitor;
		
		MonitorTask(MonitorDO aMonitor)
		{
			monitor = aMonitor;
		}

		@Override
		public void run() {
			if (LOG.isDebugEnabled()){
				LOG.debug("started running Monitor with Id: " + monitor.getId());
			}
			long start = System.currentTimeMillis();
			MonitoringService service = getMonitoringService();
			try {
				AlertDO alert = service.executeMonitorAndPersistAlert(monitor);
				if (alert != null){
					performMonitorActions(monitor, alert);
				}
			} catch (Exception e) {
				LOG.error("Error executing Monitor with Id: " + monitor.getId(), e);
			}
			if (LOG.isDebugEnabled()){
				LOG.debug("ended running Monitor with Id: " + monitor.getId() + ". Time taken (ms): " + (System.currentTimeMillis() - start));
			}
		}		
	}
	

	/**
	 * This method is already being called from a separate thread, so no need to spawn another thread
	 * to perform monitor actions.
	 * @param monitor
	 * @param alert
	 * @throws AddressException 
	 * @throws MessagingException 
	 */
	private void performMonitorActions(MonitorDO monitor, AlertDO alert)
			throws AddressException, MessagingException {
		if (!monitor.isSendEmail()) {
			return;
		}
		/*
		 * following snippet has been copied from DABSAgentServiceImpl.java
		 */
		IComponentManager compMgr = ComponentManagerFactory
				.getComponentManager();
		if (compMgr.isComponentRegistered(IMailHelper.COMP_NAME)) {
			IMailHelper mh = (IMailHelper) compMgr
					.getComponent(IMailHelper.COMP_NAME);
			String subject = new StringBuilder("Monitor '").append(monitor.getName())
					.append("' triggered alert at ").append(alert.getTriggeredAt()).toString();
			
			StringBuilder message = new StringBuilder();
			message.append("There is a new alert generated by '").append(monitor.getName());
			if (monitor.getAlertMessage() != null && !monitor.getAlertMessage().isEmpty())
			{
				message.append("' with the following message:\n\n");
				message.append("      ").append(monitor.getAlertMessage()).append("\n\n\n");
			}
			else
			{
				message.append("'.\n\n");
			}
			message.append("This is an auto generated email from Control Center Server.")
			.append("To see more details, please log into CC Reporter Application.");
			
			
			try {
				// if fromAddress is set to null, default fromAddress (set in
				// configuration.xml) will be used
				mh.sendMessage(null, monitor.getEmailAddress(), subject, message.toString());
			} catch (Exception e) {
				if (LOG.isWarnEnabled()) {
					LOG.warn("Unable to send Alert notification mail: "
							+ subject + " ", e);
				}
			}
		} else {
			LOG.warn("Alert Email notification was ignored because the mail server settings are not configured");			
		}
	}
	
	private synchronized static MonitoringService getMonitoringService()
	{
		if (mService == null)
		{
			mService = new MonitoringService();
		}
		return mService;
	}

	@Override
	public void shutdown() {
		executor.shutdownNow();
	}
}
